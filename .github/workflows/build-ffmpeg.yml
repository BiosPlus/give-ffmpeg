# .github/workflows/build-ffmpeg.yml
name: "Build FFmpeg for Linux"
on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout FFmpeg repository
        uses: actions/checkout@v3
        with:
          repository: FFmpeg/FFmpeg
          path: ffmpeg-source

      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build

    
      - name: Clone AOM source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 https://aomedia.googlesource.com/aom
      
      - name: Clone SVT-AV1 source
        run: |
          cd $HOME/ffmpeg_sources
          git clone https://gitlab.com/AOMediaCodec/SVT-AV1.git

      - name: Clone dav1d source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 https://code.videolan.org/videolan/dav1d.git

      - name: Clone VMAF source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 --branch libvmaf_v3 https://github.com/Netflix/vmaf.git

      - name: Get AOM commit hash
        id: aom_hash
        run: |
          cd $HOME/ffmpeg_sources/aom
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      
      - name: Get SVT-AV1 commit hash
        id: svtav1_hash
        run: |
          cd $HOME/ffmpeg_sources/SVT-AV1
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Get dav1d commit hash
        id: dav1d_hash
        run: |
          cd $HOME/ffmpeg_sources/dav1d
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Get VMAF commit hash
        id: vmaf_hash
        run: |
          cd $HOME/ffmpeg_sources/vmaf
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Test pathing
        run: |
            paths=(
              "$HOME/ffmpeg_build/aom_build"
              "$HOME/ffmpeg_build/aom"
              "$HOME/aom_installed.flag"
              "$HOME/ffmpeg_build/SVT-AV1_build"
              "$HOME/ffmpeg_build/SVT-AV1"
              "$HOME/svtav1_installed.flag"
              "$HOME/ffmpeg_build/dav1d_build"
              "$HOME/ffmpeg_build/dav1d"
              "$HOME/dav1d_installed.flag"
              "$HOME/ffmpeg_build/vmaf_build"
              "$HOME/ffmpeg_build/vmaf"
              "$HOME/libvmaf_installed.flag"
            )

            for path in "${paths[@]}"; do
              if [ -e "$path" ]; then
              echo "Exists: $path"
              else
              echo "Missing: $path"
              fi
            done

      - name: Cache AOM build
        uses: actions/cache@v4
        with:
          path: |
            $HOME/ffmpeg_build/aom_build
            $HOME/ffmpeg_build/aom
            $HOME/aom_installed.flag
          key: aom-${{ runner.os }}-${{ matrix.arch }}-${{ steps.aom_hash.outputs.hash }}
  
      - name: Cache SVT-AV1 build
        uses: actions/cache@v4
        with:
          path: |
            $HOME/ffmpeg_build/SVT-AV1_build
            $HOME/ffmpeg_build/SVT-AV1
            $HOME/svtav1_installed.flag
          key: svtav1-${{ runner.os }}-${{ matrix.arch }}-${{ steps.svtav1_hash.outputs.hash }}
      
      - name: Cache dav1d build
        uses: actions/cache@v4
        with:
          path: |
            $HOME/ffmpeg_build/dav1d_build
            $HOME/ffmpeg_build/dav1d
            $HOME/dav1d_installed.flag
          key: dav1d-${{ runner.os }}-${{ matrix.arch }}-${{ steps.dav1d_hash.outputs.hash }}

      - name: Cache VMAF build
        uses: actions/cache@v4
        with:
          path: |
            $HOME/ffmpeg_build/vmaf_build
            $HOME/ffmpeg_build/vmaf
            $HOME/libvmaf_installed.flag
          key: vmaf-${{ runner.os }}-${{ matrix.arch }}-${{ steps.vmaf_hash.outputs.hash }}

      - name: Update packages for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: |
            sudo apt-get install -qq -y autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libmp3lame-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            meson \
            ninja-build \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev

      - name: Install nasm for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -qq nasm

      - name: Install x264 for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -qq libx264-dev

      - name: Install x265 for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -qq libx265-dev libnuma-dev

      - name: Install libvpx for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -qq libvpx-dev

      - name: Install libfdk-aac for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -qq libfdk-aac-dev

      - name: Install libopus for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -qq libopus-dev

      - name: Build AOM from source
        if: matrix.os == 'ubuntu-latest'
        run: |
          AOM_SRC_DIR="$HOME/ffmpeg_sources/aom"
          AOM_BUILD_DIR="$HOME/ffmpeg_build/aom_build"
          AOM_INSTALL_DIR="$HOME/ffmpeg_build/aom"
      
          if [ -f "$HOME/aom_installed.flag" ]; then
            echo "AOM already installed from cache."
            exit 0
          fi
      
          mkdir -p "$AOM_BUILD_DIR"
          cd "$AOM_BUILD_DIR"
      
          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" \
            -DCMAKE_INSTALL_PREFIX="$AOM_INSTALL_DIR" \
            -DCMAKE_C_FLAGS_RELEASE="-O3 -mtune=generic" \
            -DCMAKE_CXX_FLAGS_RELEASE="-O3 -mtune=generic" \
            -DENABLE_TESTS=OFF \
            -DENABLE_NASM=on \
            "$AOM_SRC_DIR"
      
          PATH="$HOME/bin:$PATH" make -j"$(nproc)"
          make install
      
          touch "$HOME/aom_installed.flag"
      
      - name: Build SVT-AV1 from source
        if: matrix.os == 'ubuntu-latest'
        run: |
          SVT_SRC_DIR="$HOME/ffmpeg_sources/SVT-AV1"
          SVT_BUILD_DIR="$HOME/ffmpeg_build/SVT-AV1_build"
          SVT_INSTALL_DIR="$HOME/ffmpeg_build/SVT-AV1"

          if [ -f "$HOME/svtav1_installed.flag" ]; then
            echo "SVT-AV1 already installed from cache."
            exit 0
          fi

          mkdir -p "$SVT_BUILD_DIR"
          cd "$SVT_BUILD_DIR"

          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" \
            -DCMAKE_INSTALL_PREFIX="$SVT_INSTALL_DIR" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS_RELEASE="-O3 -mtune=generic" \
            -DCMAKE_CXX_FLAGS_RELEASE="-O3 -mtune=generic" \
            -DBUILD_DEC=OFF \
            -DBUILD_SHARED_LIBS=OFF \
            "$SVT_SRC_DIR"

          PATH="$HOME/bin:$PATH" make -j"$(nproc)"
          make install

          touch "$HOME/svtav1_installed.flag"

      - name: Build dav1d from source
        if: matrix.os == 'ubuntu-latest'
        run: |
          DAV1D_SRC_DIR="$HOME/ffmpeg_sources/dav1d"
          DAV1D_BUILD_DIR="$HOME/ffmpeg_build/dav1d_build"
          DAV1D_INSTALL_DIR="$HOME/ffmpeg_build/dav1d"
      
          if [ -f "$HOME/dav1d_installed.flag" ]; then
            echo "dav1d already installed from cache."
            exit 0
          fi
      
          # git -C "$DAV1D_SRC_DIR" pull 2>/dev/null || git clone --depth 1 https://code.videolan.org/videolan/dav1d.git
      
          mkdir -p "$DAV1D_BUILD_DIR"
          cd "$DAV1D_BUILD_DIR"

          export CFLAGS="-O3 -mtune=generic"
          export CXXFLAGS="-O3 -mtune=generic"

          meson setup \
            --default-library=static \
            --prefix="$DAV1D_INSTALL_DIR" \
            --libdir="$DAV1D_INSTALL_DIR/lib" \
            -Denable_tools=false \
            -Denable_tests=false \
            "$DAV1D_SRC_DIR"
      
          ninja
          ninja install
      
          touch "$HOME/dav1d_installed.flag"
      
      - name: Build VMAF from source
        if: matrix.os == 'ubuntu-latest'
        run: |
          VMAF_SRC_DIR="$HOME/ffmpeg_sources/vmaf/libvmaf"
          VMAF_BUILD_DIR="$HOME/ffmpeg_build/vmaf_build"
          VMAF_INSTALL_DIR="$HOME/ffmpeg_build/vmaf"
      
          if [ -f "$HOME/libvmaf_installed.flag" ]; then
            echo "libvmaf already installed from cache."
            exit 0
          fi
      
          mkdir -p "$VMAF_BUILD_DIR"
          cd "$VMAF_BUILD_DIR"
      
          export CFLAGS="-O3 -mtune=generic"
          export CXXFLAGS="-O3 -mtune=generic"
      
          meson setup \
            --buildtype=release \
            --default-library=static \
            --prefix="$VMAF_INSTALL_DIR" \
            --libdir="$VMAF_INSTALL_DIR/lib" \
            --bindir="$HOME/bin" \
            -Denable_tests=false \
            -Denable_docs=false \
            "$VMAF_SRC_DIR"
      
          ninja
          ninja install
      
          touch "$HOME/libvmaf_installed.flag"
             
      # - name: Build FFmpeg
      #   run: |
      #     cd ffmpeg-source

      #     export PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig:$HOME/ffmpeg_build/dav1d/lib/pkgconfig:$HOME/ffmpeg_build/vmaf/lib/pkgconfig:$HOME/ffmpeg_build/SVT-AV1/lib/pkgconfig:$HOME/ffmpeg_build/aom/lib/pkgconfig:$PKG_CONFIG_PATH"
      #     export CFLAGS="-O3 -mtune=generic"
      #     export CXXFLAGS="-O3 -mtune=generic"

      #     AOM_FLAG=""
      #     if [ -f "$HOME/aom_installed.flag" ]; then
      #       AOM_FLAG="--enable-libaom"
      #     fi

      #     DAV1D_FLAG=""
      #     if [ -f "$HOME/dav1d_installed.flag" ]; then
      #       DAV1D_FLAG="--enable-libdav1d"
      #     fi

      #     SVTAV1_FLAG=""
      #     if [ -f "$HOME/svtav1_installed.flag" ]; then
      #       SVTAV1_FLAG="--enable-libsvtav1"
      #     fi

      #     # needs to be worked out, returning ERROR: libvmaf >= 2.0.0 not found using pkg-config
      #     # VMAF_FLAG=""
      #     # if [ -f "$HOME/libvmaf_installed.flag" ]; then
      #     #   VMAF_FLAG="--enable-libvmaf"
      #     # fi

      #     ./configure --prefix=../build/${{ matrix.os }}-${{ matrix.arch }} \
      #     --arch=${{ matrix.arch }} \
      #     --target-os=linux \
      #     --enable-gpl \
      #     --enable-gnutls \
      #     ${AOM_FLAG} \
      #     ${DAV1D_FLAG} \
      #     ${SVTAV1_FLAG} \
      #     ${VMAF_FLAG} \
      #     --enable-libass \
      #     --enable-libfdk-aac \
      #     --enable-libfreetype \
      #     --enable-libmp3lame \
      #     --enable-libopus \
      #     --enable-libvorbis \
      #     --enable-libvpx \
      #     --enable-libx264 \
      #     --enable-libx265 \
      #     --enable-nonfree \
      #     --samples=fate-suite/
      #     make -j$(nproc)
      #     make install

      - name: Test pathing
        run: |
            paths=(
              "$HOME/ffmpeg_build/aom_build"
              "$HOME/ffmpeg_build/aom"
              "$HOME/aom_installed.flag"
              "$HOME/ffmpeg_build/SVT-AV1_build"
              "$HOME/ffmpeg_build/SVT-AV1"
              "$HOME/svtav1_installed.flag"
              "$HOME/ffmpeg_build/dav1d_build"
              "$HOME/ffmpeg_build/dav1d"
              "$HOME/dav1d_installed.flag"
              "$HOME/ffmpeg_build/vmaf_build"
              "$HOME/ffmpeg_build/vmaf"
              "$HOME/libvmaf_installed.flag"
            )

            for path in "${paths[@]}"; do
              if [ -e "$path" ]; then
              echo "Exists: $path"
              else
              echo "Missing: $path"
              fi
            done