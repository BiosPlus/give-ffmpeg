# .github/workflows/build-ffmpeg.yml
name: "Build FFmpeg for Linux"
on:
  push:
    branches: [ main ]

jobs:
  dependancy-svtav1:
    runs-on: ubuntu-latest
    strategy:
    
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build
      - name: Clone SVT-AV1 source
        run: |
          cd $HOME/ffmpeg_sources
          git clone https://gitlab.com/AOMediaCodec/SVT-AV1.git

      - name: Get SVT-AV1 commit hash
        id: svtav1_hash
        run: |
          cd $HOME/ffmpeg_sources/SVT-AV1
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      
      - name: Cache SVT-AV1 build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/SVT-AV1_build
            ~/ffmpeg_build/SVT-AV1
            ~/svtav1_installed.flag
          key: svtav1-${{ runner.os }}-${{ matrix.arch }}-${{ steps.svtav1_hash.outputs.hash }}

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: |
            sudo apt-get install -qq -y autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libmp3lame-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            meson \
            nasm \
            ninja-build \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev

      - name: Build SVT-AV1 from source
        if: matrix.os == 'ubuntu-latest'
        run: |
          SVT_SRC_DIR="$HOME/ffmpeg_sources/SVT-AV1"
          SVT_BUILD_DIR="$HOME/ffmpeg_build/SVT-AV1_build"
          SVT_INSTALL_DIR="$HOME/ffmpeg_build/SVT-AV1"

          if [ -f "$HOME/svtav1_installed.flag" ]; then
            echo "SVT-AV1 already installed from cache."
            exit 0
          fi

          mkdir -p "$SVT_BUILD_DIR"
          cd "$SVT_BUILD_DIR"

          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" \
            -DCMAKE_INSTALL_PREFIX="$SVT_INSTALL_DIR" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS_RELEASE="-O3 -mtune=generic" \
            -DCMAKE_CXX_FLAGS_RELEASE="-O3 -mtune=generic" \
            -DBUILD_DEC=OFF \
            -DBUILD_SHARED_LIBS=OFF \
            "$SVT_SRC_DIR"

          PATH="$HOME/bin:$PATH" make -j"$(nproc)"
          make install

          touch "$HOME/svtav1_installed.flag"

  dependancy-dav1d:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build 
          
      - name: Clone dav1d source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 https://code.videolan.org/videolan/dav1d.git

      - name: Get dav1d commit hash
        id: dav1d_hash
        run: |
          cd $HOME/ffmpeg_sources/dav1d
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          
      - name: Cache dav1d build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/dav1d_build
            ~/ffmpeg_build/dav1d
            ~/dav1d_installed.flag
          key: dav1d-${{ runner.os }}-${{ matrix.arch }}-${{ steps.dav1d_hash.outputs.hash }}

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: |
            sudo apt-get install -qq -y autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libmp3lame-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            meson \
            nasm \
            ninja-build \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev

      - name: Build dav1d from source
        if: matrix.os == 'ubuntu-latest'
        run: |
          DAV1D_SRC_DIR="$HOME/ffmpeg_sources/dav1d"
          DAV1D_BUILD_DIR="$HOME/ffmpeg_build/dav1d_build"
          DAV1D_INSTALL_DIR="$HOME/ffmpeg_build/dav1d"
      
          if [ -f "$HOME/dav1d_installed.flag" ]; then
            echo "dav1d already installed from cache."
            exit 0
          fi
      
          # git -C "$DAV1D_SRC_DIR" pull 2>/dev/null || git clone --depth 1 https://code.videolan.org/videolan/dav1d.git
      
          mkdir -p "$DAV1D_BUILD_DIR"
          cd "$DAV1D_BUILD_DIR"

          meson setup \
            --default-library=static \
            --prefix="$DAV1D_INSTALL_DIR" \
            --libdir="$DAV1D_INSTALL_DIR/lib" \
            -Denable_tools=false \
            -Denable_tests=false \
            "$DAV1D_SRC_DIR"
      
          ninja
          ninja install
      
          touch "$HOME/dav1d_installed.flag"

  dependancy-aom:
    runs-on: ubuntu-latest
    strategy:
    
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build
      
      - name: Clone AOM source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 https://aomedia.googlesource.com/aom

      - name: Get AOM commit hash
        id: aom_hash
        run: |
          cd $HOME/ffmpeg_sources/aom
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      
      - name: Cache AOM build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/aom_build
            ~/ffmpeg_build/aom
            ~/aom_installed.flag
          key: aom-${{ runner.os }}-${{ matrix.arch }}-${{ steps.aom_hash.outputs.hash }}


      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: |
            sudo apt-get install -qq -y autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libmp3lame-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            meson \
            nasm \
            ninja-build \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev

      - name: Build AOM from source
        if: matrix.os == 'ubuntu-latest'
        run: |
          AOM_SRC_DIR="$HOME/ffmpeg_sources/aom"
          AOM_BUILD_DIR="$HOME/ffmpeg_build/aom_build"
          AOM_INSTALL_DIR="$HOME/ffmpeg_build/aom"
      
          if [ -f "$HOME/aom_installed.flag" ]; then
            echo "AOM already installed from cache."
            exit 0
          fi
      
          mkdir -p "$AOM_BUILD_DIR"
          cd "$AOM_BUILD_DIR"
      
          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" \
            -DCMAKE_INSTALL_PREFIX="$AOM_INSTALL_DIR" \
            -DENABLE_TESTS=OFF \
            -DENABLE_NASM=on \
            "$AOM_SRC_DIR"
      
          PATH="$HOME/bin:$PATH" make -j"$(nproc)"
          make install
      
          touch "$HOME/aom_installed.flag"

  dependancy-vmaf:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build

      - name: Clone VMAF source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 --branch libvmaf_v3 https://github.com/Netflix/vmaf.git

      - name: Get vmaf commit hash
        id: vmaf_hash
        run: |
          cd $HOME/ffmpeg_sources/vmaf
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Cache vmaf build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/vmaf_build
            ~/ffmpeg_build/vmaf
            ~/libvmaf_installed.flag
          key: vmaf-${{ runner.os }}-${{ matrix.arch }}-${{ steps.vmaf_hash.outputs.hash }}

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: |
            sudo apt-get install -qq -y autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libmp3lame-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            meson \
            nasm \
            ninja-build \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev

      - name: Build VMAF from source
        if: matrix.os == 'ubuntu-latest'
        run: |
          VMAF_SRC_DIR="$HOME/ffmpeg_sources/vmaf/libvmaf"
          VMAF_BUILD_DIR="$HOME/ffmpeg_build/vmaf_build"
          VMAF_INSTALL_DIR="$HOME/ffmpeg_build/vmaf"
      
          if [ -f "$HOME/libvmaf_installed.flag" ]; then
            echo "libvmaf already installed from cache."
            exit 0
          fi
      
          mkdir -p "$VMAF_BUILD_DIR"
          cd "$VMAF_BUILD_DIR"
      
          meson setup \
            --buildtype=release \
            --default-library=static \
            --prefix="$VMAF_INSTALL_DIR" \
            --libdir="$VMAF_INSTALL_DIR/lib" \
            --bindir="$HOME/bin" \
            -Denable_tests=false \
            -Denable_docs=false \
            "$VMAF_SRC_DIR"
      
          ninja
          ninja install
      
          touch "$HOME/libvmaf_installed.flag"

  dependancy-x264:
    runs-on: ubuntu-latest
    strategy:
    
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build
      
      - name: Clone x264 source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 https://code.videolan.org/videolan/x264.git

      - name: Get x264 commit hash
        id: x264_hash
        run: |
          cd $HOME/ffmpeg_sources/x264
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      
      - name: Cache x264 build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/x264_build
            ~/ffmpeg_build/x264
            ~/x264_installed.flag
          key: x264-${{ runner.os }}-${{ matrix.arch }}-${{ steps.x264_hash.outputs.hash }}

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: |
            sudo apt-get install -qq -y autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libmp3lame-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            meson \
            nasm \
            ninja-build \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev

      - name: Build x264 from source
        if: matrix.os == 'ubuntu-latest'
        run: |
            X264_SRC_DIR="$HOME/ffmpeg_sources/x264"
            X264_BUILD_DIR="$HOME/ffmpeg_build/x264_build"
            X264_INSTALL_DIR="$HOME/ffmpeg_build/x264"
          
            if [ -f "$HOME/x264_installed.flag" ]; then
              echo "x264 already installed from cache."
              exit 0
            fi
          
            mkdir -p "$X264_BUILD_DIR"
            cd "$X264_SRC_DIR"
          
            PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure \
            --prefix="$X264_INSTALL_DIR" \
            --bindir="$HOME/bin" \
            --enable-static \
            --enable-pic
          
            PATH="$HOME/bin:$PATH" make -j"$(nproc)"
            make install
          
            touch "$HOME/x264_installed.flag"

  dependancy-x265:
      runs-on: ubuntu-latest
      strategy:
      
        fail-fast: false
        matrix:
          os: [ubuntu-latest]
          arch: [x86_64]
          # Other arch: aarch64, arm, riscv, ppc, s390
      steps:
        - name: Create ffmpeg_sources directory
          run: |
            mkdir -p $HOME/ffmpeg_sources
            mkdir -p $HOME/ffmpeg_build
        
        - name: Clone x265 source
          run: |
            cd $HOME/ffmpeg_sources
            git clone https://bitbucket.org/multicoreware/x265_git.git x265

        - name: Get x265 commit hash
          id: x265_hash
          run: |
            cd $HOME/ffmpeg_sources/x265
            echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
        
        - name: Cache x265 build
          uses: actions/cache@v4
          with:
            path: |
              ~/ffmpeg_build/x265_build
              ~/ffmpeg_build/x265
              ~/x265_installed.flag
            key: x265-${{ runner.os }}-${{ matrix.arch }}-${{ steps.x265_hash.outputs.hash }}

        - name: Install base dependencies for Ubuntu (APT)
          if: matrix.os == 'ubuntu-latest'
          run: |
              sudo apt-get install -qq -y autoconf \
              automake \
              build-essential \
              cmake \
              git-core \
              libass-dev \
              libfreetype6-dev \
              libgnutls28-dev \
              libmp3lame-dev \
              libsdl2-dev \
              libtool \
              libva-dev \
              libvdpau-dev \
              libvorbis-dev \
              libxcb1-dev \
              libxcb-shm0-dev \
              libxcb-xfixes0-dev \
              meson \
              nasm \
              ninja-build \
              pkg-config \
              texinfo \
              wget \
              yasm \
              zlib1g-dev

        - name: Build x265 from source
          if: matrix.os == 'ubuntu-latest'
          run: |
                x265_SRC_DIR="$HOME/ffmpeg_sources/x265"
                x265_BUILD_DIR="$HOME/ffmpeg_build/x265_build"
                x265_INSTALL_DIR="$HOME/ffmpeg_build/x265"
              
                if [ -f "$HOME/x265_installed.flag" ]; then
                  echo "x265 already installed from cache."
                  exit 0
                fi
              
                mkdir -p "$x265_BUILD_DIR"
                cd "$x265_SRC_DIR/build/linux"
              
                PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" \
                -DCMAKE_INSTALL_PREFIX="$x265_INSTALL_DIR" \
                -DENABLE_SHARED=off \
                "$x265_SRC_DIR/source"
              
                PATH="$HOME/bin:$PATH" make -j"$(nproc)"
                make install
              
                touch "$HOME/x265_installed.flag"

  build-ffmpeg:
    runs-on: ${{ matrix.os }}
    needs: 
      - dependancy-aom
      - dependancy-dav1d
      - dependancy-svtav1
      - dependancy-vmaf
      - dependancy-x264
      - dependancy-x265

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout FFmpeg repository
        uses: actions/checkout@v3
        with:
          repository: FFmpeg/FFmpeg
          path: ffmpeg-source

      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build

# These cache steps (and anything that uses the with: path: option) only support ~/ paths, not $HOME/ or $GITHUB_WORKSPACE/. Total fucking jank.
      - name: Cache AOM build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/aom_build
            ~/ffmpeg_build/aom
            ~/aom_installed.flag
          key: aom-${{ runner.os }}-${{ matrix.arch }}-${{ steps.aom_hash.outputs.hash }}
  
      - name: Cache SVT-AV1 build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/SVT-AV1_build
            ~/ffmpeg_build/SVT-AV1
            ~/svtav1_installed.flag
          key: svtav1-${{ runner.os }}-${{ matrix.arch }}-${{ steps.svtav1_hash.outputs.hash }}
      
      - name: Cache dav1d build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/dav1d_build
            ~/ffmpeg_build/dav1d
            ~/dav1d_installed.flag
          key: dav1d-${{ runner.os }}-${{ matrix.arch }}-${{ steps.dav1d_hash.outputs.hash }}

      - name: Cache VMAF build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/vmaf_build
            ~/ffmpeg_build/vmaf
            ~/libvmaf_installed.flag
          key: vmaf-${{ runner.os }}-${{ matrix.arch }}-${{ steps.vmaf_hash.outputs.hash }}

      - name: Cache x264 build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/x264_build
            ~/ffmpeg_build/x264
            ~/x264_installed.flag
          key: x264-${{ runner.os }}-${{ matrix.arch }}-${{ steps.x264_hash.outputs.hash }}

      - name: Cache x265 build
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/x265_build
            ~/ffmpeg_build/x265
            ~/x265_installed.flag
          key: x265-${{ runner.os }}-${{ matrix.arch }}-${{ steps.x265_hash.outputs.hash }}

      - name: Update packages for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: |
            sudo apt-get install -qq -y autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libmp3lame-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            meson \
            nasm \
            ninja-build \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev

      - name: Install libvpx for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -qq libvpx-dev

      - name: Install libfdk-aac for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -qq libfdk-aac-dev

      - name: Install libopus for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -qq libopus-dev
             
      - name: Build FFmpeg
        run: |
          cd ffmpeg-source

          export CFLAGS="-O3 -mtune=generic"
          export CXXFLAGS="-O3 -mtune=generic"

          AOM_FLAG=""
          if [ -f "$HOME/aom_installed.flag" ]; then
            AOM_FLAG="--enable-libaom"
          fi

          DAV1D_FLAG=""
          if [ -f "$HOME/dav1d_installed.flag" ]; then
            DAV1D_FLAG="--enable-libdav1d"
          fi

          SVTAV1_FLAG=""
          if [ -f "$HOME/svtav1_installed.flag" ]; then
            SVTAV1_FLAG="--enable-libsvtav1"
          fi

          X264_FLAG=""
          if [ -f "$HOME/x264_installed.flag" ]; then
            X264_FLAG="--enable-libx264"
          fi

          X265_FLAG=""
          if [ -f "$HOME/x265_installed.flag" ]; then
            X265_FLAG="--enable-libx265"
          fi

          # needs to be worked out, returning ERROR: libvmaf >= 2.0.0 not found using pkg-config
          # VMAF_FLAG=""
          # if [ -f "$HOME/libvmaf_installed.flag" ]; then
          #   VMAF_FLAG="--enable-libvmaf"
          # fi

          ./configure --prefix=../build/${{ matrix.os }}-${{ matrix.arch }} \
          --arch=${{ matrix.arch }} \
          --target-os=linux \
          --enable-gpl \
          --enable-gnutls \
          ${AOM_FLAG} \
          ${DAV1D_FLAG} \
          ${SVTAV1_FLAG} \
          ${VMAF_FLAG} \
          --enable-libass \
          --enable-libfdk-aac \
          --enable-libfreetype \
          --enable-libmp3lame \
          --enable-libopus \
          --enable-libvorbis \
          --enable-libvpx \
          ${X264_FLAG} \
          ${X265_FLAG} \
          --enable-nonfree \
          --samples=fate-suite/
          
          make -j$(nproc)

          make install