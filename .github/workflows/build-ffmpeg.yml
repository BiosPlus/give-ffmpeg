# .github/workflows/build-ffmpeg.yml
name: "Build FFmpeg for Linux"
on:
  push:
    branches: [ main ]

jobs:
  dependancy-svtav1:
    runs-on: ubuntu-latest
    strategy:
    
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build
      - name: Clone SVT-AV1 source
        run: |
          cd $HOME/ffmpeg_sources
          git clone https://gitlab.com/AOMediaCodec/SVT-AV1.git

      - name: Get SVT-AV1 commit hash
        id: svtav1_hash
        run: |
          cd $HOME/ffmpeg_sources/SVT-AV1
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      
      - name: Cache SVT-AV1 build
        id: cache-svtav1
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/SVT-AV1_build
            ~/ffmpeg_build/SVT-AV1
            ~/svtav1_installed.flag
          key: svtav1-${{ runner.os }}-${{ matrix.arch }}-${{ steps.svtav1_hash.outputs.hash }}

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest' && steps.cache-svtav1.outputs.cache-hit != 'true'
        run: |
          sudo apt install -qq -y build-essential \
          cmake \
          git-core \
          libtool \
          pkg-config \
          wget \
          yasm \
          zlib1g-dev

      - name: Build SVT-AV1 from source
        if: matrix.os == 'ubuntu-latest' && steps.cache-svtav1.outputs.cache-hit != 'true'
        run: |
          SVT_SRC_DIR="$HOME/ffmpeg_sources/SVT-AV1"
          SVT_BUILD_DIR="$HOME/ffmpeg_build/SVT-AV1_build"
          SVT_INSTALL_DIR="$HOME/ffmpeg_build/SVT-AV1"

          mkdir -p "$SVT_BUILD_DIR"
          cd "$SVT_BUILD_DIR"

          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" \
            -DCMAKE_INSTALL_PREFIX="$SVT_INSTALL_DIR" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS_RELEASE="-O3 -mtune=generic" \
            -DCMAKE_CXX_FLAGS_RELEASE="-O3 -mtune=generic" \
            -DBUILD_DEC=OFF \
            -DBUILD_SHARED_LIBS=OFF \
            "$SVT_SRC_DIR"

          PATH="$HOME/bin:$PATH" make -j"$(nproc)"
          make install

          touch "$HOME/svtav1_installed.flag"

  dependancy-dav1d:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build 
          
      - name: Clone dav1d source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 https://code.videolan.org/videolan/dav1d.git

      - name: Get dav1d commit hash
        id: dav1d_hash
        run: |
          cd $HOME/ffmpeg_sources/dav1d
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          
      - name: Cache dav1d build
        id: cache-dav1d
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/dav1d_build
            ~/ffmpeg_build/dav1d
            ~/dav1d_installed.flag
          key: dav1d-${{ runner.os }}-${{ matrix.arch }}-${{ steps.dav1d_hash.outputs.hash }}

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest' && steps.cache-dav1d.outputs.cache-hit != 'true'
        run: |
          sudo apt install -qq -y build-essential \
            cmake \
            git-core \
            libtool \
            meson \
            pkg-config \
            wget \
            yasm \
            zlib1g-dev \
            nasm

      - name: Build dav1d from source
        if: matrix.os == 'ubuntu-latest' && steps.cache-dav1d.outputs.cache-hit != 'true'
        run: |
          DAV1D_SRC_DIR="$HOME/ffmpeg_sources/dav1d"
          DAV1D_BUILD_DIR="$HOME/ffmpeg_build/dav1d_build"
          DAV1D_INSTALL_DIR="$HOME/ffmpeg_build/dav1d"

          mkdir -p "$DAV1D_BUILD_DIR"
          cd "$DAV1D_BUILD_DIR"

          meson setup \
            --default-library=static \
            --prefix="$DAV1D_INSTALL_DIR" \
            --libdir="$DAV1D_INSTALL_DIR/lib" \
            -Denable_tools=false \
            -Denable_tests=false \
            "$DAV1D_SRC_DIR"
      
          ninja
          ninja install
      
          touch "$HOME/dav1d_installed.flag"

  dependancy-aom:
    runs-on: ubuntu-latest
    strategy:
    
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build
      
      - name: Clone AOM source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 https://aomedia.googlesource.com/aom

      - name: Get AOM commit hash
        id: aom_hash
        run: |
          cd $HOME/ffmpeg_sources/aom
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      
      - name: Cache AOM build
        id: cache-aom
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/aom_build
            ~/ffmpeg_build/aom
            ~/aom_installed.flag
          key: aom-${{ runner.os }}-${{ matrix.arch }}-${{ steps.aom_hash.outputs.hash }}
      
      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest' && steps.cache-aom.outputs.cache-hit != 'true'
        run: |
          sudo apt install -qq -y build-essential \
            cmake \
            git-core \
            libtool \
            pkg-config \
            wget \
            yasm \
            zlib1g-dev \
            nasm

      - name: Build AOM from source
        if: matrix.os == 'ubuntu-latest' && steps.cache-aom.outputs.cache-hit != 'true'
        run: |
          AOM_SRC_DIR="$HOME/ffmpeg_sources/aom"
          AOM_BUILD_DIR="$HOME/ffmpeg_build/aom_build"
          AOM_INSTALL_DIR="$HOME/ffmpeg_build/aom"
      
          mkdir -p "$AOM_BUILD_DIR"
          cd "$AOM_BUILD_DIR"
      
          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" \
            -DCMAKE_INSTALL_PREFIX="$AOM_INSTALL_DIR" \
            -DENABLE_TESTS=OFF \
            -DENABLE_NASM=on \
            "$AOM_SRC_DIR"
      
          PATH="$HOME/bin:$PATH" make -j"$(nproc)"
          make install
      
          touch "$HOME/aom_installed.flag"

  dependancy-libvmaf:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build

      - name: Clone libvmaf source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 --branch libvmaf_v3 https://github.com/Netflix/vmaf.git libvmaf

      - name: Get libvmaf commit hash
        id: libvmaf_hash
        run: |
          cd $HOME/ffmpeg_sources/libvmaf
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Cache libvmaf build
        id: cache-libvmaf
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/libvmaf_build
            ~/ffmpeg_build/libvmaf
            ~/libvmaf_installed.flag
          key: libvmaf-${{ runner.os }}-${{ matrix.arch }}-${{ steps.libvmaf_hash.outputs.hash }}

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest' && steps.cache-libvmaf.outputs.cache-hit != 'true'
        run: |
          sudo apt install -qq -y build-essential \
            cmake \
            git-core \
            libtool \
            meson \
            pkg-config \
            wget \
            yasm \
            zlib1g-dev \
            nasm

      - name: Build libvmaf from source
        if: matrix.os == 'ubuntu-latest' && steps.cache-libvmaf.outputs.cache-hit != 'true'
        run: |
          libvmaf_SRC_DIR="$HOME/ffmpeg_sources/libvmaf/libvmaf"
          libvmaf_BUILD_DIR="$HOME/ffmpeg_build/libvmaf_build"
          libvmaf_INSTALL_DIR="$HOME/ffmpeg_build/libvmaf"
      
          mkdir -p "$libvmaf_BUILD_DIR"
          cd "$libvmaf_BUILD_DIR"
      
          meson setup \
            --buildtype=release \
            --default-library=static \
            --prefix="$libvmaf_INSTALL_DIR" \
            --libdir="$libvmaf_INSTALL_DIR/lib" \
            --bindir="$HOME/bin" \
            -Denable_tests=false \
            -Denable_docs=false \
            "$libvmaf_SRC_DIR"
      
          ninja
          ninja install
      
          touch "$HOME/libvmaf_installed.flag"

  dependancy-libx264:
    runs-on: ubuntu-latest
    strategy:
    
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build
      
      - name: Clone libx264 source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 https://code.videolan.org/videolan/x264.git libx264

      - name: Get libx264 commit hash
        id: libx264_hash
        run: |
          cd $HOME/ffmpeg_sources/libx264
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      
      - name: Cache libx264 build
        id: cache-libx264
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/libx264_build
            ~/ffmpeg_build/libx264
            ~/libx264_installed.flag
          key: libx264-${{ runner.os }}-${{ matrix.arch }}-${{ steps.libx264_hash.outputs.hash }}

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest' && steps.cache-libx264.outputs.cache-hit != 'true'
        run: |
          sudo apt install -qq -y build-essential \
            cmake \
            git-core \
            libtool \
            pkg-config \
            wget \
            yasm \
            zlib1g-dev \
            nasm

      - name: Build libx264 from source
        if: matrix.os == 'ubuntu-latest' && steps.cache-libx264.outputs.cache-hit != 'true'
        run: |
            libx264_SRC_DIR="$HOME/ffmpeg_sources/libx264"
            libx264_BUILD_DIR="$HOME/ffmpeg_build/libx264_build"
            libx264_INSTALL_DIR="$HOME/ffmpeg_build/libx264"
          
            mkdir -p "$libx264_BUILD_DIR"
            cd "$libx264_SRC_DIR"
          
            PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure \
            --prefix="$libx264_INSTALL_DIR" \
            --bindir="$HOME/bin" \
            --enable-static \
            --enable-pic
          
            PATH="$HOME/bin:$PATH" make -j"$(nproc)"
            make install
          
            touch "$HOME/libx264_installed.flag"

  dependancy-libx265:
      runs-on: ubuntu-latest
      strategy:
      
        fail-fast: false
        matrix:
          os: [ubuntu-latest]
          arch: [x86_64]
          # Other arch: aarch64, arm, riscv, ppc, s390
      steps:
        - name: Create ffmpeg_sources directory
          run: |
            mkdir -p $HOME/ffmpeg_sources
            mkdir -p $HOME/ffmpeg_build
        
        - name: Clone libx265 source
          run: |
            cd $HOME/ffmpeg_sources
            git clone https://bitbucket.org/multicoreware/x265_git.git libx265

        - name: Get libx265 commit hash
          id: libx265_hash
          run: |
            cd $HOME/ffmpeg_sources/libx265
            echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
        
        - name: Cache libx265 build
          id: cache-libx265
          uses: actions/cache@v4
          with:
            path: |
              ~/ffmpeg_build/libx265_build
              ~/ffmpeg_build/libx265
              ~/libx265_installed.flag
            key: libx265-${{ runner.os }}-${{ matrix.arch }}-${{ steps.libx265_hash.outputs.hash }}

        - name: Install base dependencies for Ubuntu (APT)
          if: matrix.os == 'ubuntu-latest' && steps.cache-libx265.outputs.cache-hit != 'true'
          run: |
              sudo apt install -qq -y build-essential \
              cmake \
              git-core \
              libtool \
              pkg-config \
              wget \
              yasm \
              zlib1g-dev

        - name: Build libx265 from source
          if: matrix.os == 'ubuntu-latest' && steps.cache-libx265.outputs.cache-hit != 'true'
          run: |
            libx265_SRC_DIR="$HOME/ffmpeg_sources/libx265"
            libx265_BUILD_DIR="$HOME/ffmpeg_build/libx265_build"
            libx265_INSTALL_DIR="$HOME/ffmpeg_build/libx265"
        
            mkdir -p "$libx265_BUILD_DIR"
            cd "$libx265_SRC_DIR/build/linux"
        
            PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" \
              -DCMAKE_INSTALL_PREFIX="$libx265_INSTALL_DIR" \
              -DENABLE_SHARED=off \
              -DENABLE_PIC=on \
              -DCMAKE_POSITION_INDEPENDENT_CODE=on \
              "$libx265_SRC_DIR/source"
        
            PATH="$HOME/bin:$PATH" make -j"$(nproc)"
            make install
               
            touch "$HOME/libx265_installed.flag"
                 
  dependancy-libopus:
    runs-on: ubuntu-latest
    strategy:
    
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390
    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build
      
      - name: Clone libopus source
        run: |
          cd $HOME/ffmpeg_sources
          git -C opus pull 2> /dev/null || git clone --depth 1 https://github.com/xiph/opus.git libopus
      
      - name: Get libopus commit hash
        id: libopus_hash
        run: |
          cd $HOME/ffmpeg_sources/libopus
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      
      - name: Cache libopus build
        id: cache-libopus
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/libopus_build
            ~/ffmpeg_build/libopus
            ~/libopus_installed.flag
          key: libopus-${{ runner.os }}-${{ matrix.arch }}-${{ steps.libopus_hash.outputs.hash }}

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest' && steps.cache-libopus.outputs.cache-hit != 'true'
        run: |
          sudo apt install -qq -y autoconf \
          automake \
          build-essential \
          cmake \
          git-core \
          libtool \
          pkg-config \
          wget \
          yasm \
          zlib1g-dev

      - name: Build libopus from source
        if: matrix.os == 'ubuntu-latest' && steps.cache-libopus.outputs.cache-hit != 'true'
        run: |
          cd $HOME/ffmpeg_sources/libopus
          ./autogen.sh
          ./configure --prefix="$HOME/ffmpeg_build" --disable-shared
          make
          make install
          touch "$HOME/libopus_installed.flag"
  
  dependancy-libvpx:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390

    steps:
      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build

      - name: Clone libvpx source
        run: |
          cd $HOME/ffmpeg_sources
          git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git

      - name: Get libvpx commit hash
        id: libvpx_hash
        run: |
          cd $HOME/ffmpeg_sources/libvpx
          echo "hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Cache libvpx build
        id: cache-libvpx
        uses: actions/cache@v4
        with:
          path: |
            ~/ffmpeg_build/libvpx_build
            ~/ffmpeg_build/libvpx
            ~/libvpx_installed.flag
          key: libvpx-${{ runner.os }}-${{ matrix.arch }}-${{ steps.libvpx_hash.outputs.hash }}

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest' && steps.cache-libvpx.outputs.cache-hit != 'true'
        run: |
          sudo apt install -qq -y autoconf \
          automake \
          build-essential \
          cmake \
          git-core \
          libtool \
          pkg-config \
          wget \
          yasm \
          zlib1g-dev

      - name: Build libvpx from source
        if: matrix.os == 'ubuntu-latest' && steps.cache-libvpx.outputs.cache-hit != 'true'
        run: |

          libvpx_SRC_DIR="$HOME/ffmpeg_sources/libvpx"
          libvpx_BUILD_DIR="$HOME/ffmpeg_build/libvpx_build"
          libvpx_INSTALL_DIR="$HOME/ffmpeg_build/libvpx"

          mkdir -p "$libvpx_BUILD_DIR"

          cd "$libvpx_SRC_DIR"
          PATH="$HOME/bin:$PATH" ./configure --prefix="$libvpx_INSTALL_DIR" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm
          make
          make install

          touch "$HOME/libvpx_installed.flag"

  build-ffmpeg:
    runs-on: ${{ matrix.os }}
    needs: 
      - dependancy-aom
      - dependancy-dav1d
      - dependancy-libopus
      - dependancy-libvmaf
      - dependancy-libvpx
      - dependancy-libx264
      - dependancy-libx265
      - dependancy-svtav1

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        # Other arch: aarch64, arm, riscv, ppc, s390

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout FFmpeg repository
        uses: actions/checkout@v3
        with:
          repository: FFmpeg/FFmpeg
          path: ffmpeg-source

      - name: Create ffmpeg_sources directory
        run: |
          mkdir -p $HOME/ffmpeg_sources
          mkdir -p $HOME/ffmpeg_build

# These cache steps (and anything that uses the with: path: option) only support ~/ paths, not $HOME/ or $GITHUB_WORKSPACE/. Total fucking jank.
      - name: Cache AOM build
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/ffmpeg_build/aom_build
            ~/ffmpeg_build/aom
            ~/aom_installed.flag
          key: aom-${{ runner.os }}-${{ matrix.arch }}-${{ steps.aom_hash.outputs.hash }}
  
      - name: Cache SVT-AV1 build
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/ffmpeg_build/SVT-AV1_build
            ~/ffmpeg_build/SVT-AV1
            ~/svtav1_installed.flag
          key: svtav1-${{ runner.os }}-${{ matrix.arch }}-${{ steps.svtav1_hash.outputs.hash }}
      
      - name: Cache dav1d build
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/ffmpeg_build/dav1d_build
            ~/ffmpeg_build/dav1d
            ~/dav1d_installed.flag
          key: dav1d-${{ runner.os }}-${{ matrix.arch }}-${{ steps.dav1d_hash.outputs.hash }}

      - name: Cache libvmaf build
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/ffmpeg_build/libvmaf_build
            ~/ffmpeg_build/libvmaf
            ~/libvmaf_installed.flag
          key: libvmaf-${{ runner.os }}-${{ matrix.arch }}-${{ steps.libvmaf_hash.outputs.hash }}

      - name: Cache libx264 build
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/ffmpeg_build/libx264_build
            ~/ffmpeg_build/libx264
            ~/libx264_installed.flag
          key: libx264-${{ runner.os }}-${{ matrix.arch }}-${{ steps.libx264_hash.outputs.hash }}

      - name: Cache libx265 build
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/ffmpeg_build/libx265_build
            ~/ffmpeg_build/libx265
            ~/libx265_installed.flag
          key: libx265-${{ runner.os }}-${{ matrix.arch }}-${{ steps.libx265_hash.outputs.hash }}

      - name: Cache libopus build
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/ffmpeg_build/libopus_build
            ~/ffmpeg_build/libopus
            ~/libopus_installed.flag
          key: libopus-${{ runner.os }}-${{ matrix.arch }}-${{ steps.libopus_hash.outputs.hash }}

      - name: Cache libvpx build
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/ffmpeg_build/libvpx_build
            ~/ffmpeg_build/libvpx
            ~/libvpx_installed.flag
          key: libvpx-${{ runner.os }}-${{ matrix.arch }}-${{ steps.libvpx_hash.outputs.hash }}

      - name: Update packages for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update

      - name: Install base dependencies for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: |
            sudo apt install -qq -y autoconf \
            automake \
            build-essential \
            cmake \
            git-core \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libmp3lame-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            meson \
            nasm \
            ninja-build \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev

      - name: Install libfdk-aac for Ubuntu (APT)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install -qq libfdk-aac-dev
             
      - name: Build FFmpeg
        run: |
          cd ffmpeg-source

          # Dynamically gather all valid .pc dirs
          export PKG_CONFIG_PATH=$(find ~/ffmpeg_build -type f -name '*.pc' -exec dirname {} \; | sort -u | tr '\n' ':' | sed 's/:$//')

          # Set compiler flags
          export CFLAGS="-O3 -mtune=generic"
          export CXXFLAGS="-O3 -mtune=generic"

          # Define an array of libraries to check
          LIBRARIES=("libaom" "dav1d" "SvtAv1Enc" "libx264" "libx265" "libopus" "vpx")

          # Initialize flags
          CONFIG_FLAGS="--enable-nonfree --enable-gpl --enable-gnutls --enable-libass --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libvorbis"

          # List all available pkg-config packages
          echo "⚠️ Available pkg-config packages:"
          pkg-config --list-all

          # Loop through each library and check if it exists
            for LIB in "${LIBRARIES[@]}"; do
              if pkg-config --exists "$LIB"; then
              VERSION=$(pkg-config --modversion "$LIB" 2>/dev/null || echo "unknown version")
              case "$LIB" in
                "aom") CONFIG_FLAGS+=" --enable-libaom"; echo "✅ Found libaom (version $VERSION), enabling AOM support." ;;
                "dav1d") CONFIG_FLAGS+=" --enable-libdav1d"; echo "✅ Found dav1d (version $VERSION), enabling DAV1D support." ;;
                "SvtAv1Enc") CONFIG_FLAGS+=" --enable-libsvtav1"; echo "✅ Found SVT-AV1 (version $VERSION), enabling SVT-AV1 support." ;;
                "x264") CONFIG_FLAGS+=" --enable-libx264"; echo "✅ Found libx264 (version $VERSION), enabling x264 support." ;;
                "x265") CONFIG_FLAGS+=" --enable-libx265"; echo "✅ Found libx265 (version $VERSION), enabling x265 support." ;;
                "libopus") CONFIG_FLAGS+=" --enable-libopus"; echo "✅ Found libopus (version $VERSION), enabling Opus support." ;;
                "vpx") CONFIG_FLAGS+=" --enable-libvpx"; echo "✅ Found libvpx (version $VERSION), enabling libVPX support." ;;
                "libvmaf") CONFIG_FLAGS+=" --enable-libvmaf"; echo "✅ Found libvmaf (version $VERSION), enabling VMAF support." ;;
              esac
              else
                echo "❌ Library $LIB not found, skipping."
              fi
            done

          ./configure --prefix=../build/${{ matrix.os }}-${{ matrix.arch }} \
          --arch=${{ matrix.arch }} \
          --target-os=linux \
          $CONFIG_FLAGS \
          --samples=fate-suite/

          make -j$(nproc)
          make install